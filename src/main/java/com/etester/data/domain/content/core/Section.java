package com.etester.data.domain.content.core;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.etester.data.domain.content.DerivedSectionQuestion;
import com.etester.data.domain.content.additional.wordlist.WlPassage;
import com.etester.data.domain.content.additional.wordlist.WlWord;

@Entity
@Table(name = "section")
public class Section {

	public static String WORD_LIST_SECTION_TYPE = "wl";
	public static String WORD_REVIEW_SECTION_TYPE = "wr";
	public static String DERIVED_SECTION_TYPE = "ds";
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_section")
	private Long idSection;

	@NotNull
	@Column(name = "id_provider")
	private Long idProvider;

	@NotNull
	@Column(name = "id_skill")
	private Long idSkill;

	@Size(min = 0, max = 100)
	private String name;

	@Size(min = 0, max = 200)
	private String description;

	@Column(name = "text")
	private String text;

	@Column(name = "is_linktext")
	private Integer isLinktext;

	@Column(name = "linktext_address")
	private String linktextAddress;

	@Column(name = "addl_info")
	private String addlInfo;

	@Column(name = "time_to_answer")
	private Integer timeToAnswer;

	// The following attributes are used only when a section is in the context of a test (testsection)
	private Float pointsPerQuestion;
	private Float negativePointsPerQuestion;
	private Float unansweredPointsPerQuestion;
	private Integer questionStartIndex;
	private Integer distributedScoring;
	
	
	@Column(name = "auto_generated")
	private Integer autoGenerated;

	@Column(name = "generator_metadata")
	private String generatorMetadata;

	@Column(name = "question_banner")
	@Size(min = 0, max = 45)
	private String questionBanner;

	@Column(name = "question_heading")
	@Size(min = 0, max = 200)
	private String questionHeading;

	@Column(name = "question_instructions")
	@Size(min = 0, max = 200)
	private String questionInstructions;

	@Column(name = "is_external")
	private Integer isExternal;

	@Column(name = "section_type")
	@Size(min = 0, max = 10)
	private String sectionType;

	@Column(name = "is_practice")
	private Integer isPractice;
	
//	private String userresponse;

	private boolean isWordlist = false;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinColumn(name = "id_question")
	private List<Question> questions;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinColumn(name = "id_question")
	private List<DerivedSectionQuestion> derivedSectionQuestions;

	@Transient
	private List<Questionset> questionsets;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name= "id_wordlist")
    private List<WlWord> words;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name= "id_wordlist")
    private List<WlPassage> passages;
    
    // Strings used to represent parent skill information - used in some places like list views
    private String skillName;
	private String skillDescription;

	// Variable used when this bean is used in the context of print functionality. This represents the 
	// print settings if any saved for the test    
	private String printsectionsettings;

	public Section() {
		// default the section values for pointsPerQuestion & negativePointsPerQuestion
		this.pointsPerQuestion = 1.0f;
		this.negativePointsPerQuestion = 0.0f;
	}

	/**
	 * @return the idSection
	 */
	public Long getIdSection() {
		return idSection;
	}

	/**
	 * @param idSection the idSection to set
	 */
	public void setIdSection(Long idSection) {
		this.idSection = idSection;
	}

	/**
	 * @return the idProvider
	 */
	public Long getIdProvider() {
		return idProvider;
	}

	/**
	 * @param idProvider the idProvider to set
	 */
	public void setIdProvider(Long idProvider) {
		this.idProvider = idProvider;
	}

	/**
	 * @return the idSkill
	 */
	public Long getIdSkill() {
		return idSkill;
	}

	/**
	 * @param idSkill the idSkill to set
	 */
	public void setIdSkill(Long idSkill) {
		this.idSkill = idSkill;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the text
	 */
	public String getText() {
		return text;
	}

	/**
	 * @param text the text to set
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * @return the isLinktext
	 */
	public Integer getIsLinktext() {
		return isLinktext;
	}

	/**
	 * @param isLinktext the isLinktext to set
	 */
	public void setIsLinktext(Integer isLinktext) {
		this.isLinktext = isLinktext;
	}

	/**
	 * @return the linktextAddress
	 */
	public String getLinktextAddress() {
		return linktextAddress;
	}

	/**
	 * @param linktextAddress the linktextAddress to set
	 */
	public void setLinktextAddress(String linktextAddress) {
		this.linktextAddress = linktextAddress;
	}

	/**
	 * @return the addlInfo
	 */
	public String getAddlInfo() {
		return addlInfo;
	}

	/**
	 * @param addlInfo the addlInfo to set
	 */
	public void setAddlInfo(String addlInfo) {
		this.addlInfo = addlInfo;
	}

	/**
	 * @return the timeToAnswer
	 */
	public Integer getTimeToAnswer() {
		return timeToAnswer;
	}

	/**
	 * @param timeToAnswer the timeToAnswer to set
	 */
	public void setTimeToAnswer(Integer timeToAnswer) {
		this.timeToAnswer = timeToAnswer;
	}

	/**
	 * @return the pointsPerQuestion
	 */
	public Float getPointsPerQuestion() {
		return pointsPerQuestion;
	}

	/**
	 * @param pointsPerQuestion the pointsPerQuestion to set
	 */
	public void setPointsPerQuestion(Float pointsPerQuestion) {
		this.pointsPerQuestion = pointsPerQuestion;
	}

	/**
	 * @return the negativePointsPerQuestion
	 */
	public Float getNegativePointsPerQuestion() {
		return negativePointsPerQuestion;
	}

	/**
	 * @param negativePointsPerQuestion the negativePointsPerQuestion to set
	 */
	public void setNegativePointsPerQuestion(Float negativePointsPerQuestion) {
		this.negativePointsPerQuestion = negativePointsPerQuestion;
	}

	/**
	 * @return the unansweredPointsPerQuestion
	 */
	public Float getUnansweredPointsPerQuestion() {
		return unansweredPointsPerQuestion;
	}

	/**
	 * @param unansweredPointsPerQuestion the unansweredPointsPerQuestion to set
	 */
	public void setUnansweredPointsPerQuestion(
			Float unansweredPointsPerQuestion) {
		this.unansweredPointsPerQuestion = unansweredPointsPerQuestion;
	}

	/**
	 * @return the questionStartIndex
	 */
	public Integer getQuestionStartIndex() {
		return questionStartIndex;
	}

	/**
	 * @param questionStartIndex the questionStartIndex to set
	 */
	public void setQuestionStartIndex(Integer questionStartIndex) {
		this.questionStartIndex = questionStartIndex;
	}

	/**
	 * @return the distributedScoring
	 */
	public Integer getDistributedScoring() {
		return distributedScoring;
	}

	/**
	 * @param distributedScoring the distributedScoring to set
	 */
	public void setDistributedScoring(Integer distributedScoring) {
		this.distributedScoring = distributedScoring;
	}

	/**
	 * @return the autoGenerated
	 */
	public Integer getAutoGenerated() {
		return autoGenerated;
	}

	/**
	 * @param autoGenerated the autoGenerated to set
	 */
	public void setAutoGenerated(Integer autoGenerated) {
		this.autoGenerated = autoGenerated;
	}

	/**
	 * @return the generatorMetadata
	 */
	public String getGeneratorMetadata() {
		return generatorMetadata;
	}

	/**
	 * @param generatorMetadata the generatorMetadata to set
	 */
	public void setGeneratorMetadata(String generatorMetadata) {
		this.generatorMetadata = generatorMetadata;
	}

	/**
	 * @return the questionBanner
	 */
	public String getQuestionBanner() {
		return questionBanner;
	}

	/**
	 * @param questionBanner the questionBanner to set
	 */
	public void setQuestionBanner(String questionBanner) {
		this.questionBanner = questionBanner;
	}

	/**
	 * @return the questionHeading
	 */
	public String getQuestionHeading() {
		return questionHeading;
	}

	/**
	 * @param questionHeading the questionHeading to set
	 */
	public void setQuestionHeading(String questionHeading) {
		this.questionHeading = questionHeading;
	}

	/**
	 * @return the questionInstructions
	 */
	public String getQuestionInstructions() {
		return questionInstructions;
	}

	/**
	 * @param questionInstructions the questionInstructions to set
	 */
	public void setQuestionInstructions(String questionInstructions) {
		this.questionInstructions = questionInstructions;
	}

	/**
	 * @return the isExternal
	 */
	public Integer getIsExternal() {
		return isExternal;
	}

	/**
	 * @param isExternal the isExternal to set
	 */
	public void setIsExternal(Integer isExternal) {
		this.isExternal = isExternal;
	}

	/**
	 * @return the sectionType
	 */
	public String getSectionType() {
		return sectionType;
	}

	/**
	 * @param sectionType the sectionType to set
	 */
	public void setSectionType(String sectionType) {
		this.sectionType = sectionType;
	}

	/**
	 * @return the isPractice
	 */
	public Integer getIsPractice() {
		return isPractice;
	}

	/**
	 * @param isPractice the isPractice to set
	 */
	public void setIsPractice(Integer isPractice) {
		this.isPractice = isPractice;
	}

	/**
	 * @return the isWordlist
	 */
	public boolean isWordlist() {
		if (this.isExternal != null && this.isExternal == 1 && this.getSectionType() != null && 
				(WORD_LIST_SECTION_TYPE.equalsIgnoreCase(this.getSectionType()) || WORD_REVIEW_SECTION_TYPE.equalsIgnoreCase(this.getSectionType()))) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * @param isWordlist the isWordlist to set
	 */
	public void setWordlist(boolean isWordlist) {
		this.isWordlist = isWordlist;
	}

//	/**
//	 * @return the isDerivedSection
//	 */
//	public boolean isDerivedSection() {
//		if (DERIVED_SECTION_TYPE.equalsIgnoreCase(this.getSectionType())) {
//			return true;
//		} else {
//			return false;
//		}
//	}

	/**
	 * @return the derivedSectionQuestions
	 */
	public List<DerivedSectionQuestion> getDerivedSectionQuestions() {
		return derivedSectionQuestions;
	}

	/**
	 * @param derivedSectionQuestions the derivedSectionQuestions to set
	 */
	public void setDerivedSectionQuestions(
			List<DerivedSectionQuestion> derivedSectionQuestions) {
		this.derivedSectionQuestions = derivedSectionQuestions;
	}

	/**
	 * @return the questions
	 */
	public List<Question> getQuestions() {
		return questions;
	}

	/**
	 * @param questions the questions to set
	 */
	public void setQuestions(List<Question> questions) {
		this.questions = questions;
	}

	/**
	 * @return the questionsets
	 */
	public List<Questionset> getQuestionsets() {
		return questionsets;
	}

	/**
	 * @param questionsets the questionsets to set
	 */
	public void setQuestionsets(List<Questionset> questionsets) {
		this.questionsets = questionsets;
	}

	/**
	 * @return the words
	 */
	public List<WlWord> getWords() {
		return words;
	}

	/**
	 * @param words the words to set
	 */
	public void setWords(List<WlWord> words) {
		this.words = words;
	}

	/**
	 * @return the passages
	 */
	public List<WlPassage> getPassages() {
		return passages;
	}

	/**
	 * @param passages the passages to set
	 */
	public void setPassages(List<WlPassage> passages) {
		this.passages = passages;
	}

	// additional meta information only fields 
	// Strings used to represent parent skill information - used in some places like list views
    /**
	 * @return the skillName
	 */
	public String getSkillName() {
		return skillName;
	}

	/**
	 * @param skillName the skillName to set
	 */
	public void setSkillName(String skillName) {
		this.skillName = skillName;
	}

	/**
	 * @return the skillDescription
	 */
	public String getSkillDescription() {
		return skillDescription;
	}

	/**
	 * @param skillDescription the skillDescription to set
	 */
	public void setSkillDescription(String skillDescription) {
		this.skillDescription = skillDescription;
	}


	/**
	 * @return the printsectionsettings
	 */
	public String getPrintsectionsettings() {
		return printsectionsettings;
	}

	/**
	 * @param printsectionsettings the printsectionsettings to set
	 */
	public void setPrintsectionsettings(String printsectionsettings) {
		this.printsectionsettings = printsectionsettings;
	}

//	/**
//	 * @return the userresponse - used in practice section functionality 
//	 */
//	public String getUserresponse() {
//		return userresponse;
//	}
//
//	/**
//	 * @param userresponse the userresponse to set - used in practice section functionality 
//	 */
//	public void setUserresponse(String userresponse) {
//		this.userresponse = userresponse;
//	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Section [idSection=" + idSection + ", idProvider=" + idProvider
				+ ", idSkill=" + idSkill + ", name=" + name + ", description="
				+ description + ", text=" + text + ", isLinktext=" + isLinktext
				+ ", linktextAddress=" + linktextAddress + ", addlInfo="
				+ addlInfo + ", timeToAnswer=" + timeToAnswer
				+ ", pointsPerQuestion=" + pointsPerQuestion
				+ ", negativePointsPerQuestion=" + negativePointsPerQuestion
				+ ", unansweredPointsPerQuestion="
				+ unansweredPointsPerQuestion + ", questionStartIndex="
				+ questionStartIndex + ", distributedScoring="
				+ distributedScoring + ", autoGenerated=" + autoGenerated
				+ ", generatorMetadata=" + generatorMetadata
				+ ", questionBanner=" + questionBanner + ", questionHeading="
				+ questionHeading + ", questionInstructions="
				+ questionInstructions + ", isExternal=" + isExternal
				+ ", sectionType=" + sectionType + ", isPractice=" + isPractice
				+ ", isWordlist=" + isWordlist + ", questions=" + questions
				+ ", derivedSectionQuestions=" + derivedSectionQuestions
				+ ", questionsets=" + questionsets + ", words=" + words
				+ ", passages=" + passages + ", skillName=" + skillName
				+ ", skillDescription=" + skillDescription + "]";
	}

}